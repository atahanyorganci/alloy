WHITESPACE = _{ "\t" | " " | "\n"}

digit = { ASCII_DIGIT | "_" }
digits = _{ ASCII_DIGIT ~ digit* }
plus = { "+" }
minus = { "-" }
sign = _{ plus | minus }

binary = @{ "0b" ~ (ASCII_BIN_DIGIT | "_")+ }
octal = @{ "0o" ~ (ASCII_OCT_DIGIT | "_")+ }
hexadecimal = @{ "0x" ~ (ASCII_HEX_DIGIT | "_")+ }
decimal = @{ !("0b" | "0o" | "0x") ~ digits ~ !(".") }
unsigned = _{ binary | octal | hexadecimal | decimal}
integer = { sign? ~ unsigned }

dot_float = @{ digits? ~ "." ~ digits }
float_dot = @{ digits ~ "." ~ digits? }
float = { sign? ~ (float_dot | dot_float) }

boolean = { "true" | "false" }
value = { float | integer | boolean }

// Binary Operators
add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
power = { "**" }
less_than = { "<"}
less_than_eq = { "<="}
greater_than = { ">"}
greater_than_eq = { ">="}
equal_to = { "==" }
not_equal_to = { "!=" }
logical_and = { k_and | "&&" }
logical_or = { k_or | "||" }
logical_xor = { k_xor }
binary_op = _{ add
    | subtract
    | multiply
    | divide
    | power
    | less_than
    | less_than_eq
    | greater_than
    | greater_than_eq
    | equal_to
    | not_equal_to
    | logical_and
    | logical_or
    | logical_xor
}

// Keywords
word_if = { "if" }
k_if = @{ word_if ~ WHITESPACE}
word_else = { "else" }
k_else = @{ word_else ~ WHITESPACE}
word_print = { "print" }
k_print = @{ word_print ~ WHITESPACE}
word_while = { "while" }
k_while = @{ word_while ~ WHITESPACE}
word_for = { "for" }
k_for = @{ word_for ~ WHITESPACE}
word_return = { "return" }
k_return = @{ word_return ~ WHITESPACE}
word_var = { "var" }
k_var = @{ word_var ~ WHITESPACE}
word_const = { "const" }
k_const = @{ word_const ~ WHITESPACE}
word_continue = { "continue" }
k_continue = @{ word_continue }
word_break = { "break" }
k_break = @{ word_break }
word_in = { "in" }
k_in = @{ word_in ~ WHITESPACE}
word_and = { "and" }
k_and = @{ word_and ~ WHITESPACE}
word_or = { "or" }
k_or = @{ word_or ~ WHITESPACE}
word_not = { "not" }
k_not = @{ word_not ~ WHITESPACE}
word_xor = { "xor" }
k_xor = @{ word_xor ~ WHITESPACE}
word_fn = { "fn" }
k_fn = @{ word_fn ~ WHITESPACE}
keyword = { word_if
    | word_else
    | word_print
    | word_while
    | word_for
    | word_return
    | word_var
    | word_const
    | word_continue
    | word_break
    | word_in
    | word_and
    | word_or
    | word_not
    | word_xor
    | word_fn
}

not = { k_not | "!" }
term = _{ value | identifier | "(" ~ expression ~ ")" | precedent_unary_expression }
precedent_unary_expression = { (plus | minus) ~ term }
binary_expression = { term ~ (binary_op ~ term)+ }
unprecedent_unary_expression = { not ~ expression }
expression = { unprecedent_unary_expression | binary_expression | term }

identifier = @{ !keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Statements
semi = _{ ";" }

// Function Statement
return_statement = { k_return ~ expression? ~ semi }
function_body_statement = _{ simple_statement | return_statement }
function_args = { (identifier ~ ",")* ~ identifier? }
function_signature = _{ identifier ~ "(" ~ function_args ~ ")" }
function_body = { "{" ~ function_body_statement* ~ "}" }
function_statement = { k_fn ~ function_signature ~ function_body }

// Print Statement
print_statement = { k_print ~ expression ~ semi}

// Declaration and Assignment Statements
declaration_statement = { k_var ~ identifier ~ semi
    | (k_const | k_var) ~ identifier ~ "=" ~ expression ~ semi
}
assignment_statement = { identifier ~ "=" ~ expression ~ semi }

// Block Statement
block_statement = { "{" ~ simple_statement* ~ "}" }

// If Statement
conditonal_statements = { "{" ~ simple_statement* ~ "}"}
if_body = { k_if ~ expression ~ conditonal_statements }
else_if_body = { k_else ~ k_if ~ expression ~ conditonal_statements }
else_body = { k_else ~ conditonal_statements }
if_statement = { if_body ~ else_if_body* ~ else_body? }

// Loop Statements
break_statement = { k_break ~ semi }
continue_statement = { k_continue ~ semi }
loop_body_statement = _{ simple_statement | break_statement | continue_statement }
loop_body = { "{" ~ loop_body_statement* ~ "}"}
while_statement = { k_while ~ expression ~ loop_body }
for_statement = { k_for ~ identifier ~ k_in ~ expression ~ loop_body }

expression_statement = { expression ~ semi }

simple_statement = _{ print_statement
    | if_statement
    | declaration_statement
    | assignment_statement
    | while_statement
    | for_statement
    | block_statement
    | expression_statement
}
top_level_statement = _{ simple_statement | function_statement }
program = _{ SOI ~ top_level_statement* ~ EOI }
